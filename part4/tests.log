tests/error1.c
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7fffcadce4b0 (1)
=====
0x7fffcadce4b0 (1)
-----
tests/error2.c
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7fffbc4374b0 (1)
=====
0x7fffbc4374b0 (1)
0x7fffbc43c820  <s_type=0,r_type=0,args=void>
   node:0x7fffbc43d460  <s_type=CONSTANT,r_type=int,args=void>
   abcde  <s_type=VARIABLE,r_type=int,args=void>
   a234567890b234567890c234567890d234567890  <s_type=VARIABLE,r_type=int,args=void>
-----
tests/error3.c
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7fffed7424b0 (1)
=====
0x7fffed7424b0 (1)
b  <s_type=VARIABLE,r_type=int,args=void>
min  <s_type=FUNCTION,r_type=int,args=void>
   node:0x7fffed74b500  <s_type=GENERIC_NODE,r_type=263,args=void>
   node:0x7fffed74c130  <s_type=CONSTANT,r_type=int,args=void>
   node:0x7fffed74c600  <s_type=CONSTANT,r_type=int,args=void>
   node:0x7fffed74d410  <s_type=CONSTANT,r_type=int,args=void>
   node:0x7fffed74b800  <s_type=GENERIC_NODE,r_type=int,args=void>
   int,int  <s_type=FUNCTION,r_type=int,args=int,int>
      node:0x7fffed748da0  <s_type=CONSTANT,r_type=int,args=void>
      0x7fffed748420  <s_type=0,r_type=0,args=void>
         x  <s_type=VARIABLE,r_type=int,args=void>
         y  <s_type=VARIABLE,r_type=int,args=void>
      x  <s_type=VARIABLE,r_type=int,args=void>
      y  <s_type=VARIABLE,r_type=int,args=void>
   node:0x7fffed74af60  <s_type=CONSTANT,r_type=int,args=void>
   node:0x7fffed74b560  <s_type=CONSTANT,r_type=int,args=void>
   node:0x7fffed74d180  <s_type=CONSTANT,r_type=int,args=void>
   c  <s_type=VARIABLE,r_type=int,args=void>
   node:0x7fffed74c8f0  <s_type=GENERIC_NODE,r_type=int,args=void>
   node:0x7fffed74c870  <s_type=GENERIC_NODE,r_type=int,args=void>
   node:0x7fffed74d680  <s_type=GENERIC_NODE,r_type=int,args=void>
   x  <s_type=VARIABLE,r_type=int,args=void>
   node:0x7fffed74c970  <s_type=GENERIC_NODE,r_type=int,args=void>
   node:0x7fffed74d780  <s_type=GENERIC_NODE,r_type=int,args=void>
   int,int,int  <s_type=FUNCTION,r_type=int,args=int,int,int>
      node:0x7fffed749c00  <s_type=GENERIC_NODE,r_type=263,args=void>
      node:0x7fffed749c60  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7fffed74a010  <s_type=GENERIC_NODE,r_type=int,args=void>
      x  <s_type=VARIABLE,r_type=int,args=void>
      y  <s_type=VARIABLE,r_type=int,args=void>
      z  <s_type=VARIABLE,r_type=int,args=void>
   y  <s_type=VARIABLE,r_type=int,args=void>
   node:0x7fffed74b200  <s_type=GENERIC_NODE,r_type=int,args=void>
-----
tests/valid1.c
------------------------------
SYNTAX TREE
------------------------------
declaration-list 
   declaration-list 
      declaration-list 
         declaration <s_type=VARIABLE,r_type=int,args=void>
         declaration <s_type=VARIABLE,r_type=int,args=void>
      function-body 
         statement-list 
            declaration <s_type=VARIABLE,r_type=int,args=void>
            if-else-statement 
               ! <s_type=GENERIC_NODE,r_type=int,args=void>
                  x <s_type=VARIABLE,r_type=int,args=void>
               statement-list 
                  declaration <s_type=VARIABLE,r_type=int,args=void>
                  return-statement 
                     z <s_type=VARIABLE,r_type=int,args=void>
               return-statement 
                  + <s_type=GENERIC_NODE,r_type=int,args=void>
                     x <s_type=VARIABLE,r_type=int,args=void>
                     y <s_type=VARIABLE,r_type=int,args=void>
   function-body 
      statement-list 
         statement-list 
            declaration <s_type=VARIABLE,r_type=int,args=void>
            function-call <s_type=FUNCTION,r_type=int,args=void>
               a <s_type=VARIABLE,r_type=int,args=void>
         statement-list 
            declaration <s_type=VARIABLE,r_type=int,args=void>
            function-call <s_type=FUNCTION,r_type=int,args=void>
               a <s_type=VARIABLE,r_type=int,args=void>
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7fffd15e84b0 (1)
=====
0x7fffd15e84b0 (1)
func3  <s_type=FUNCTION,r_type=int,args=void>
   int  <s_type=FUNCTION,r_type=int,args=int>
      0x7fffd15eee40  <s_type=0,r_type=0,args=void>
         node:0x7fffd15ef090  <s_type=CONSTANT,r_type=int,args=void>
         z  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7fffd15eeb80  <s_type=GENERIC_NODE,r_type=int,args=void>
      0x7fffd15ef720  <s_type=0,r_type=0,args=void>
         node:0x7fffd15efa10  <s_type=GENERIC_NODE,r_type=int,args=void>
      x  <s_type=VARIABLE,r_type=int,args=void>
      y  <s_type=VARIABLE,r_type=int,args=void>
gvar1  <s_type=VARIABLE,r_type=int,args=void>
gvar2  <s_type=VARIABLE,r_type=int,args=void>
main  <s_type=FUNCTION,r_type=int,args=void>
   void  <s_type=FUNCTION,r_type=int,args=void>
      a  <s_type=VARIABLE,r_type=int,args=void>
      0x7fffd15f0bb0  <s_type=0,r_type=0,args=void>
         a  <s_type=VARIABLE,r_type=int,args=void>
         node:0x7fffd15f0e00  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7fffd15f0520  <s_type=CONSTANT,r_type=int,args=void>
node:0x7fffd15edb10  <s_type=CONSTANT,r_type=int,args=void>
-----
tests/valid2.c
------------------------------
SYNTAX TREE
------------------------------
function-body 
   statement-list 
      statement-list 
         statement-list 
            statement-list 
               statement-list 
                  statement-list 
                     statement-list 
                        statement-list 
                           statement-list 
                              declaration <s_type=VARIABLE,r_type=int,args=void>
                              declaration <s_type=VARIABLE,r_type=int,args=void>
                           declaration <s_type=VARIABLE,r_type=int,args=void>
                        declaration <s_type=VARIABLE,r_type=int,args=void>
                     do-statement 
                        = <s_type=GENERIC_NODE,r_type=int,args=void>
                           b <s_type=VARIABLE,r_type=int,args=void>
                           * <s_type=GENERIC_NODE,r_type=int,args=void>
                              b <s_type=VARIABLE,r_type=int,args=void>
                              -- <s_type=GENERIC_NODE,r_type=int,args=void>
                                 c <s_type=VARIABLE,r_type=int,args=void>
                        ! <s_type=GENERIC_NODE,r_type=int,args=void>
                           == <s_type=GENERIC_NODE,r_type=int,args=void>
                              c <s_type=VARIABLE,r_type=int,args=void>
                              0 <s_type=CONSTANT,r_type=int,args=void>
                  declaration <s_type=VARIABLE,r_type=int,args=void>
               declaration <s_type=VARIABLE,r_type=float,args=void>
            declaration <s_type=VARIABLE,r_type=float,args=void>
         declaration <s_type=VARIABLE,r_type=float,args=void>
      return-statement 
         0 <s_type=CONSTANT,r_type=int,args=void>
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7fffbfb554b0 (1)
=====
0x7fffbfb554b0 (1)
main  <s_type=FUNCTION,r_type=int,args=void>
   void  <s_type=FUNCTION,r_type=int,args=void>
      node:0x7fffbfb5b840  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7fffbfb5d460  <s_type=GENERIC_NODE,r_type=int,args=void>
      0x7fffbfb5c480  <s_type=0,r_type=0,args=void>
         node:0x7fffbfb5ca70  <s_type=GENERIC_NODE,r_type=int,args=void>
         node:0x7fffbfb5c7b0  <s_type=GENERIC_NODE,r_type=int,args=void>
         node:0x7fffbfb5ce60  <s_type=GENERIC_NODE,r_type=int,args=void>
      node:0x7fffbfb5d740  <s_type=GENERIC_NODE,r_type=int,args=void>
      node:0x7fffbfb5ee50  <s_type=CONSTANT,r_type=float,args=void>
      node:0x7fffbfb5f3f0  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7fffbfb5be90  <s_type=GENERIC_NODE,r_type=int,args=void>
      a  <s_type=VARIABLE,r_type=int,args=void>
      b  <s_type=VARIABLE,r_type=int,args=void>
      c  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7fffbfb5e680  <s_type=CONSTANT,r_type=float,args=void>
      d  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7fffbfb5d1c0  <s_type=CONSTANT,r_type=int,args=void>
      h  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7fffbfb5e0c0  <s_type=CONSTANT,r_type=float,args=void>
      x  <s_type=VARIABLE,r_type=float,args=void>
      node:0x7fffbfb5ace0  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7fffbfb5b250  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7fffbfb5db30  <s_type=CONSTANT,r_type=int,args=void>
      y  <s_type=VARIABLE,r_type=float,args=void>
      z  <s_type=VARIABLE,r_type=float,args=void>
-----
tests/valid3.c
------------------------------
SYNTAX TREE
------------------------------
function-body 
   statement-list 
      statement-list 
         statement-list 
            statement-list 
               statement-list 
                  declaration <s_type=VARIABLE,r_type=char,args=void>
                  declaration <s_type=VARIABLE,r_type=char,args=void>
               declaration <s_type=VARIABLE,r_type=char,args=void>
            declaration <s_type=VARIABLE,r_type=char,args=void>
         declaration <s_type=ARRAY,r_type=char,args=void>
      declaration <s_type=ARRAY,r_type=char,args=void>
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7fffc137b4b0 (1)
=====
0x7fffc137b4b0 (1)
main  <s_type=FUNCTION,r_type=int,args=void>
   void  <s_type=FUNCTION,r_type=int,args=void>
      node:0x7fffc1381840  <s_type=CONSTANT,r_type=char,args=void>
      a  <s_type=VARIABLE,r_type=char,args=void>
      b  <s_type=VARIABLE,r_type=char,args=void>
      c  <s_type=VARIABLE,r_type=char,args=void>
      d  <s_type=VARIABLE,r_type=char,args=void>
      s1  <s_type=ARRAY,r_type=char,args=void>
      s2  <s_type=ARRAY,r_type=char,args=void>
      node:0x7fffc1380ce0  <s_type=CONSTANT,r_type=char,args=void>
      node:0x7fffc1381250  <s_type=CONSTANT,r_type=char,args=void>
      node:0x7fffc1381e30  <s_type=CONSTANT,r_type=char,args=void>
-----
tests/valid4.c
------------------------------
SYNTAX TREE
------------------------------
declaration-list 
   declaration-list 
      declaration-list 
         declaration-list 
            function-body 
               return-statement 
            function-body 
               return-statement 
         function-body 
            if-else-statement 
               < <s_type=GENERIC_NODE,r_type=int,args=void>
                  x <s_type=VARIABLE,r_type=int,args=void>
                  y <s_type=VARIABLE,r_type=int,args=void>
               return-statement 
                  x <s_type=VARIABLE,r_type=int,args=void>
               return-statement 
                  y <s_type=VARIABLE,r_type=int,args=void>
      function-body 
         statement-list 
            statement-list 
               statement-list 
                  statement-list 
                     declaration <s_type=VARIABLE,r_type=int,args=void>
                     declaration <s_type=VARIABLE,r_type=int,args=void>
                  = <s_type=GENERIC_NODE,r_type=int,args=void>
                     r <s_type=VARIABLE,r_type=int,args=void>
                     array-index <s_type=ARRAY,r_type=int,args=void>
                        0 <s_type=CONSTANT,r_type=int,args=void>
               while-statement 
                  > <s_type=GENERIC_NODE,r_type=int,args=void>
                     n <s_type=VARIABLE,r_type=int,args=void>
                     i <s_type=VARIABLE,r_type=int,args=void>
                  if-statement 
                     >= <s_type=GENERIC_NODE,r_type=int,args=void>
                        r <s_type=VARIABLE,r_type=int,args=void>
                        array-index <s_type=ARRAY,r_type=int,args=void>
                           i <s_type=VARIABLE,r_type=int,args=void>
                     statement-list 
                        = <s_type=GENERIC_NODE,r_type=int,args=void>
                           r <s_type=VARIABLE,r_type=int,args=void>
                           array-index <s_type=ARRAY,r_type=int,args=void>
                              i <s_type=VARIABLE,r_type=int,args=void>
                        ++ <s_type=GENERIC_NODE,r_type=int,args=void>
                           i <s_type=VARIABLE,r_type=int,args=void>
            return-statement 
               r <s_type=VARIABLE,r_type=int,args=void>
   function-body 
      statement-list 
         do-statement 
            statement-list 
               statement-list 
                  statement-list 
                     declaration <s_type=ARRAY,r_type=int,args=void>
                     declaration <s_type=ARRAY,r_type=int,args=void>
                  function-call <s_type=FUNCTION,r_type=void,args=void>
                     function-call <s_type=FUNCTION,r_type=int,args=void>
                        argument-list 
                           function-call <s_type=FUNCTION,r_type=int,args=void>
                              argument-list 
                                 X <s_type=ARRAY,r_type=int,args=void>
                                 3 <s_type=CONSTANT,r_type=int,args=void>
                           function-call <s_type=FUNCTION,r_type=int,args=void>
                              argument-list 
                                 Y <s_type=ARRAY,r_type=int,args=void>
                                 1 <s_type=CONSTANT,r_type=int,args=void>
               function-call <s_type=FUNCTION,r_type=void,args=void>
            0 <s_type=CONSTANT,r_type=int,args=void>
         return-statement 
            0 <s_type=CONSTANT,r_type=int,args=void>
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7ffff68b14b0 (1)
=====
0x7ffff68b14b0 (1)
write  <s_type=FUNCTION,r_type=void,args=void>
   char[]  <s_type=FUNCTION,r_type=void,args=char[]>
      x  <s_type=ARRAY,r_type=char,args=void>
   char,int,float,char[]  <s_type=FUNCTION,r_type=void,args=char,int,float,char[]>
      c1  <s_type=VARIABLE,r_type=char,args=void>
      c2  <s_type=VARIABLE,r_type=int,args=void>
      c3  <s_type=VARIABLE,r_type=float,args=void>
      c4  <s_type=ARRAY,r_type=char,args=void>
min  <s_type=FUNCTION,r_type=int,args=void>
   int,int  <s_type=FUNCTION,r_type=int,args=int,int>
      0x7ffff68b8bd0  <s_type=0,r_type=0,args=void>
      0x7ffff68b8ec0  <s_type=0,r_type=0,args=void>
      x  <s_type=VARIABLE,r_type=int,args=void>
      y  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7ffff68b8910  <s_type=GENERIC_NODE,r_type=int,args=void>
   int[],int  <s_type=FUNCTION,r_type=int,args=int[],int>
      n  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7ffff68ba510  <s_type=CONSTANT,r_type=int,args=void>
      0x7ffff68baf10  <s_type=0,r_type=0,args=void>
         node:0x7ffff68bb280  <s_type=GENERIC_NODE,r_type=int,args=void>
         0x7ffff68bb560  <s_type=0,r_type=0,args=void>
            node:0x7ffff68bbac0  <s_type=GENERIC_NODE,r_type=int,args=void>
            node:0x7ffff68bbe00  <s_type=GENERIC_NODE,r_type=int,args=void>
      node:0x7ffff68bac50  <s_type=GENERIC_NODE,r_type=int,args=void>
      r  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7ffff68ba830  <s_type=GENERIC_NODE,r_type=int,args=void>
      v  <s_type=ARRAY,r_type=int,args=void>
      node:0x7ffff68b9db0  <s_type=CONSTANT,r_type=int,args=void>
      i  <s_type=VARIABLE,r_type=int,args=void>
main  <s_type=FUNCTION,r_type=int,args=void>
   void  <s_type=FUNCTION,r_type=int,args=void>
      node:0x7ffff68bf0c0  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7ffff68bf400  <s_type=CONSTANT,r_type=int,args=void>
      0x7ffff68bc9c0  <s_type=0,r_type=0,args=void>
         node:0x7ffff68be2a0  <s_type=CONSTANT,r_type=int,args=void>
         node:0x7ffff68bceb0  <s_type=CONSTANT,r_type=int,args=void>
         node:0x7ffff68bd150  <s_type=GENERIC_NODE,r_type=int,args=void>
         node:0x7ffff68bcbf0  <s_type=CONSTANT,r_type=int,args=void>
         node:0x7ffff68bdc40  <s_type=CONSTANT,r_type=int,args=void>
         node:0x7ffff68bd450  <s_type=CONSTANT,r_type=int,args=void>
         node:0x7ffff68be6c0  <s_type=CONSTANT,r_type=int,args=void>
         node:0x7ffff68bd6f0  <s_type=GENERIC_NODE,r_type=int,args=void>
         X  <s_type=ARRAY,r_type=int,args=void>
         Y  <s_type=ARRAY,r_type=int,args=void>
-----
tests/valid5.c
------------------------------
SYNTAX TREE
------------------------------
declaration-list 
   declaration-list 
      declaration-list 
         declaration-list 
            declaration-list 
               declaration-list 
                  declaration-list 
                     declaration-list 
                        declaration-list 
                           declaration <s_type=VARIABLE,r_type=int,args=void>
                           declaration <s_type=VARIABLE,r_type=int,args=void>
                        declaration <s_type=VARIABLE,r_type=int,args=void>
                     function-body 
                        return-statement 
                           x <s_type=VARIABLE,r_type=int,args=void>
                  function-body 
                     statement-list 
                        declaration <s_type=VARIABLE,r_type=int,args=void>
                        return-statement 
                           z <s_type=VARIABLE,r_type=int,args=void>
               function-body 
                  statement-list 
                     declaration <s_type=VARIABLE,r_type=int,args=void>
                     return-statement 
                        w <s_type=VARIABLE,r_type=int,args=void>
            function-body 
               statement-list 
                  statement-list 
                     statement-list 
                        statement-list 
                           statement-list 
                              statement-list 
                                 statement-list 
                                    statement-list 
                                       statement-list 
                                          statement-list 
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                          declaration <s_type=VARIABLE,r_type=int,args=void>
                                       if-statement 
                                          1 <s_type=CONSTANT,r_type=int,args=void>
                                          statement-list 
                                             statement-list 
                                                declaration <s_type=VARIABLE,r_type=int,args=void>
                                                declaration <s_type=VARIABLE,r_type=int,args=void>
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                    if-else-statement 
                                       1 <s_type=CONSTANT,r_type=int,args=void>
                                       statement-list 
                                          statement-list 
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                          declaration <s_type=VARIABLE,r_type=int,args=void>
                                       statement-list 
                                          statement-list 
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                          declaration <s_type=VARIABLE,r_type=int,args=void>
                                 statement-list 
                                    statement-list 
                                       declaration <s_type=VARIABLE,r_type=int,args=void>
                                       statement-list 
                                          statement-list 
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                             declaration <s_type=VARIABLE,r_type=int,args=void>
                                          declaration <s_type=VARIABLE,r_type=int,args=void>
                                    declaration <s_type=VARIABLE,r_type=int,args=void>
                              declaration <s_type=VARIABLE,r_type=int,args=void>
                           declaration <s_type=VARIABLE,r_type=int,args=void>
                        declaration <s_type=VARIABLE,r_type=int,args=void>
                     while-statement 
                        0 <s_type=CONSTANT,r_type=int,args=void>
                        statement-list 
                           statement-list 
                              declaration <s_type=VARIABLE,r_type=int,args=void>
                              declaration <s_type=VARIABLE,r_type=int,args=void>
                           declaration <s_type=VARIABLE,r_type=int,args=void>
                  do-statement 
                     statement-list 
                        statement-list 
                           declaration <s_type=VARIABLE,r_type=int,args=void>
                           declaration <s_type=VARIABLE,r_type=int,args=void>
                        declaration <s_type=VARIABLE,r_type=int,args=void>
                     0 <s_type=CONSTANT,r_type=int,args=void>
         declaration <s_type=VARIABLE,r_type=int,args=void>
      declaration <s_type=VARIABLE,r_type=int,args=void>
   declaration <s_type=VARIABLE,r_type=int,args=void>
------------------------------
SYMBOL TABLE
------------------------------
top:
0x7ffff3f204b0 (1)
=====
0x7ffff3f204b0 (1)
func1  <s_type=FUNCTION,r_type=int,args=void>
   int  <s_type=FUNCTION,r_type=int,args=int>
      x  <s_type=VARIABLE,r_type=int,args=void>
func2  <s_type=FUNCTION,r_type=int,args=void>
   int,int  <s_type=FUNCTION,r_type=int,args=int,int>
      node:0x7ffff3f27500  <s_type=GENERIC_NODE,r_type=int,args=void>
      x  <s_type=VARIABLE,r_type=int,args=void>
      y  <s_type=VARIABLE,r_type=int,args=void>
      z  <s_type=VARIABLE,r_type=int,args=void>
func3  <s_type=FUNCTION,r_type=int,args=void>
   int,int,int  <s_type=FUNCTION,r_type=int,args=int,int,int>
      node:0x7ffff3f28ab0  <s_type=GENERIC_NODE,r_type=int,args=void>
      node:0x7ffff3f29110  <s_type=GENERIC_NODE,r_type=int,args=void>
      node:0x7ffff3f28e50  <s_type=GENERIC_NODE,r_type=int,args=void>
      w  <s_type=VARIABLE,r_type=int,args=void>
      x  <s_type=VARIABLE,r_type=int,args=void>
      y  <s_type=VARIABLE,r_type=int,args=void>
      z  <s_type=VARIABLE,r_type=int,args=void>
gvar1  <s_type=VARIABLE,r_type=int,args=void>
gvar2  <s_type=VARIABLE,r_type=int,args=void>
gvar3  <s_type=VARIABLE,r_type=int,args=void>
gvar4  <s_type=VARIABLE,r_type=int,args=void>
main  <s_type=FUNCTION,r_type=int,args=void>
   void  <s_type=FUNCTION,r_type=int,args=void>
      outervar3  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7ffff3f2a8a0  <s_type=CONSTANT,r_type=int,args=void>
      outervar4  <s_type=VARIABLE,r_type=int,args=void>
      0x7ffff3f2d160  <s_type=0,r_type=0,args=void>
         0x7ffff3f2d620  <s_type=0,r_type=0,args=void>
            0x7ffff3f2dae0  <s_type=0,r_type=0,args=void>
               innervar3  <s_type=VARIABLE,r_type=int,args=void>
            innervar2  <s_type=VARIABLE,r_type=int,args=void>
            innervar4  <s_type=VARIABLE,r_type=int,args=void>
         innervar1  <s_type=VARIABLE,r_type=int,args=void>
         innervar5  <s_type=VARIABLE,r_type=int,args=void>
      outervar5  <s_type=VARIABLE,r_type=int,args=void>
      0x7ffff3f2c540  <s_type=0,r_type=0,args=void>
         ifelsevar1else  <s_type=VARIABLE,r_type=int,args=void>
         ifelsevar2else  <s_type=VARIABLE,r_type=int,args=void>
         ifelsevar3else  <s_type=VARIABLE,r_type=int,args=void>
      outervar6  <s_type=VARIABLE,r_type=int,args=void>
      node:0x7ffff3f30f70  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7ffff3f2f540  <s_type=CONSTANT,r_type=int,args=void>
      node:0x7ffff3f2b780  <s_type=CONSTANT,r_type=int,args=void>
      0x7ffff3f2f7e0  <s_type=0,r_type=0,args=void>
         whilevar1  <s_type=VARIABLE,r_type=int,args=void>
         whilevar2  <s_type=VARIABLE,r_type=int,args=void>
         whilevar3  <s_type=VARIABLE,r_type=int,args=void>
      0x7ffff3f2ba20  <s_type=0,r_type=0,args=void>
         ifelsevar1if  <s_type=VARIABLE,r_type=int,args=void>
         ifelsevar2if  <s_type=VARIABLE,r_type=int,args=void>
         ifelsevar3if  <s_type=VARIABLE,r_type=int,args=void>
      0x7ffff3f30400  <s_type=0,r_type=0,args=void>
         dowhilevar1  <s_type=VARIABLE,r_type=int,args=void>
         dowhilevar2  <s_type=VARIABLE,r_type=int,args=void>
         dowhilevar3  <s_type=VARIABLE,r_type=int,args=void>
      outervar1  <s_type=VARIABLE,r_type=int,args=void>
      0x7ffff3f2ab40  <s_type=0,r_type=0,args=void>
         ifvar3  <s_type=VARIABLE,r_type=int,args=void>
         ifvar1  <s_type=VARIABLE,r_type=int,args=void>
         ifvar2  <s_type=VARIABLE,r_type=int,args=void>
      outervar2  <s_type=VARIABLE,r_type=int,args=void>
gvar5  <s_type=VARIABLE,r_type=int,args=void>
gvar6  <s_type=VARIABLE,r_type=int,args=void>
-----
